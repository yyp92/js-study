/**
 * 目标和
 * https://leetcode.cn/problems/target-sum/
 * 
 * 难度：中等
 * 
 * 题意：
 *  给定一个非负整数数组，a1, a2, ..., an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。
 *  返回可以使最终数组和为目标数 S 的所有添加符号的方法数。
 * 
 * 示例：
 *  输入：nums: [1, 1, 1, 1, 1], S: 3
 *  输出：5
 *  解释：
 *      -1+1+1+1+1 = 3
 *      +1-1+1+1+1 = 3
 *      +1+1-1+1+1 = 3
 *      +1+1+1-1+1 = 3+1+1+1+1-1 = 3
 *  一共有5种方法让最终目标和为3。
 * 
 * 提示：
 *  数组非空，且长度不会超过 20 。
 *  初始的数组的和不会超过 1000 。
 *  保证返回的最终结果能被 32 位整数存下。
 * 
 * 
 * 思路：
 *  本题要如何使表达式结果为target，
 *  既然为target，那么就一定有 left组合 - right组合 = target。
 *  left + right等于sum，而sum是固定的。
 *  公式来了， left - (sum - left) = target -> left = (target + sum)/2 。
 *  target是固定的，sum是固定的，left就可以求出来。
 *  此时问题就是在集合nums中找出和为left的组合。
 * 
 *  动态规划:
 *      如何转化为01背包问题呢。
 *      假设加法的总和为x，那么减法对应的总和就是sum - x。
 *      所以我们要求的是 x - (sum - x) = S
 *      x = (S + sum) / 2
 *      此时问题就转化为，装满容量为x背包，有几种方法。
 *      大家看到(S + sum) / 2 应该担心计算的过程中向下取整有没有影响。
 * 
 *      这么担心就对了，例如sum 是5，S是2的话其实就是无解的，所以：
 *          if ((S + sum) % 2 == 1) return 0; // 此时没有方案
 *      同时如果 S的绝对值已经大于sum，那么也是没有方案的：
 *          if (abs(S) > sum) return 0; // 此时没有方案
 * 
 *      再回归到01背包问题，为什么是01背包呢？
 *      因为每个物品（题目中的1）只用一次！
 *      这次和之前遇到的背包问题不一样了，之前都是求容量为j的背包，最多能装多少。
 *      本题则是装满有几种方法。其实这就是一个组合问题了。
 * 
 *          1.确定dp数组以及下标的含义
 *              dp[j] 表示：填满j（包括j）这么大容积的包，有dp[j]种方法
 *              其实也可以使用二维dp数组来求解本题，dp[i][j]：使用 下标为[0, i]的nums[i]能够凑满j（包括j）这么大容量的包，有dp[i][j]种方法。
 *              下面我都是统一使用一维数组进行讲解， 二维降为一维（滚动数组），其实就是上一层拷贝下来，这个我在动态规划：关于01背包问题，你该了解这些！（滚动数组）也有介绍。
 * 
 *          2.确定递推公式
 *              有哪些来源可以推出dp[j]呢？
 *              不考虑nums[i]的情况下，填满容量为j - nums[i]的背包，有dp[j - nums[i]]种方法。
 *              那么只要搞到nums[i]的话，凑成dp[j]就有dp[j - nums[i]] 种方法。
 *              例如：dp[j]，j 为5，
 *                  已经有一个1（nums[i]） 的话，有 dp[4]种方法 凑成 dp[5]。
 *                  已经有一个2（nums[i]） 的话，有 dp[3]种方法 凑成 dp[5]。
 *                  已经有一个3（nums[i]） 的话，有 dp[2]中方法 凑成 dp[5]
 *                  已经有一个4（nums[i]） 的话，有 dp[1]中方法 凑成 dp[5]
 *                  已经有一个5（nums[i]） 的话，有 dp[0]中方法 凑成 dp[5]
 *              那么凑整dp[5]有多少方法呢，也就是把 所有的 dp[j - nums[i]] 累加起来。
 *              所以求组合类问题的公式，都是类似这种：dp[j] += dp[j - nums[i]]
 *              这个公式在后面在讲解背包解决排列组合问题的时候还会用到！
 * 
 *          3.dp数组如何初始化
 *              从递归公式可以看出，在初始化的时候dp[0] 一定要初始化为1，因为dp[0]是在公式中一切递推结果的起源，如果dp[0]是0的话，递归结果将都是0。
 *              dp[0] = 1，理论上也很好解释，装满容量为0的背包，有1种方法，就是装0件物品。
 *              dp[j]其他下标对应的数值应该初始化为0，从递归公式也可以看出，dp[j]要保证是0的初始值，才能正确的由dp[j - nums[i]]推导出来。
 *          4.确定遍历顺序
 *              在动态规划：关于01背包问题，你该了解这些！（滚动数组） 中，我们讲过对于01背包问题一维dp的遍历，nums放在外循环，target在内循环，且内循环倒序。
 * 
 *          5.举例推导dp数组
 *              输入：nums: [1, 1, 1, 1, 1], S: 3
 *              bagSize = (S + sum) / 2 = (3 + 5) / 2 = 4
 * 
 * 
 * 复杂度：
 *  时间复杂度：O(n × m)，n为正数个数，m为背包容量
 *  空间复杂度：O(m)，m为背包容量
 * 
 * 
 * 总结：
 *  本题还是有点难度，大家也可以记住，在求装满背包有几种方法的情况下，递推公式一般为：
 *  @TODO: dp[j] += dp[j - nums[i]];
 *  后面我们在讲解完全背包的时候，还会用到这个递推公式！
 */
const findTargetSumWays = (nums, target) => {
    // * dp[j] 表示：填满j（包括j）这么大容积的包，有dp[j]种方法
    
    const sum = nums.reduce((a, b) => a + b);
    
    // target 的绝对值已经大于sum，也是无解的
    if (Math.abs(target) > sum) {
        return 0;
    }

    // 如果sum + target 为奇数，就是无解的
    if ((target + sum) % 2) {
        return 0;
    }

    const halfSum = (target + sum) / 2;

    let dp = new Array(halfSum + 1).fill(0);
    // 初始化
    dp[0] = 1;

    // 物品遍历的for循环放在外层，遍历背包的for循环放在内层，且内层for循环倒序遍历
    for (let i = 0; i < nums.length; i++) {
        for (let j = halfSum; j >= nums[i]; j--) {
            // 推导公式
            dp[j] += dp[j - nums[i]];
        }
    }

    return dp[halfSum];
};


// 测试
// 5
const arr = [1, 1, 1, 1, 1]
const s = 3
console.log(findTargetSumWays(arr, s))
