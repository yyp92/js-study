/**
 * 分发饼干
 * 
 * 示例 1:
 *  输入: g = [1,2,3], s = [1,1]
 *  输出: 1 
 *  解释:你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。
 * 
 * 示例 2:
 *  输入: g = [1,2], s = [1,2,3]
 *  输出: 2
 *  解释:你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.
 * 
 * 提示：
 *  1 <= g.length <= 3 * 10^4
 *  0 <= s.length <= 3 * 10^4
 *  1 <= g[i], s[j] <= 2^31 - 1
 * 
 * 
 * 思路：
 *  为了满足更多的小孩，就不要造成饼干尺寸的浪费。
 *  大尺寸的饼干既可以满足胃口大的孩子也可以满足胃口小的孩子，那么就应该优先满足胃口大的。
 *  这里的局部最优就是大饼干喂给胃口大的，充分利用饼干尺寸喂饱一个，全局最优就是喂饱尽可能多的小孩。
 *  可以尝试使用贪心策略，先将饼干数组和小孩数组排序。
 *  然后从后向前遍历小孩数组，用大饼干优先满足胃口大的，并统计满足小孩数量。
 * 
 * 总结：
 *  想清楚局部最优，想清楚全局最优，感觉局部最优是可以推出全局最优，并想不出反例，那么就试一试贪心。
 */

// g -> 孩子，s -> 饼干
const findContentChildren = function(g, s) {
    g = g.sort((a, b) => a - b)
    s = s.sort((a, b) => a - b)
    let result = 0
    let index = s.length - 1

    // g: 孩子胃口
    for (let i = g.length - 1; i >= 0; i--) {
        // s: 饼干
        if (index >= 0 && s[index] >= g[i]) {
            result++
            index--
        }
    }

    return result
};


// 测试
const g = [1,2,3]
const s = [1,1]
console.log(findContentChildren(g, s))

const g1 = [1,2]
const s1 = [1,2,3]
console.log(findContentChildren(g1, s1))

